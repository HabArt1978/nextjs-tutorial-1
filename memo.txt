# pnpm install / Мы рекомендуем использовать pnpm в качестве менеджера пакетов, так как он быстрее и эффективнее, чем npm или yarn. (Документация)

 - npm install -g pnpm
 - Run "pnpm self-update" to update.
 - npx create-next-app@latest nextjs-tutorial-1 --use-pnpm
 - pnpm dev

# daisyUi - библиотека компонентов для Tailwind CSS
# Плагин @tailwindcss/typography нужен для спаивания связки daisyUi/tailwindcss

 - pnpm i -D daisyui@latest
 - pnpm i -D @tailwindcss/typography
 - pnpm i -D prettier prettier-plugin-tailwindcss
 - pnpm i -D eslint @eslint/eslintrc eslint-config-next eslint-config-prettier eslint-plugin-prettier


 =================|| dynamic rendering & dynamic routing ||=====================

 Где-то в вашем коде вы использовали API, который использует динамический рендеринг.

Динамические API - это:

Реквизиты params и searchParams, которые передаются страницам, макетам, API метаданных и обработчикам маршрутов.
cookies(), draftMode() и headers() из next/headers
В Next 15 эти API стали асинхронными. Подробнее об этом можно прочитать в статье Next.js 15

 =================|| using npx check-node-version ||=====================
Этот инструмент позволяет проверять версии node, npm и pnpm перед установкой зависимостей.
📌 Шаги:
1.	Установите пакет check-node-version:

pnpm add check-node-version --save-dev

2.	Добавьте проверку в package.json перед установкой:

Копировать - редактировать

"scripts": {
  "preinstall": "npx check-node-version --node '>=20.16.0 <21.0.0' --npm '>=10.8.1 <11.0.0' --pnpm '>=9.15.4 <21.0.0'"
}

Как это работает?
Теперь перед pnpm install будет выполняться проверка версии. Если версия не соответствует, установка зависимостей прервется с ошибкой.

=================|| Prisma setup ||=====================
Сервер Prisma: Автономный компонент инфраструктуры, расположенный поверх вашей базы данных.

 - pnpm add -D prisma
 - pnpm install @prisma/client
 - npx prisma init --datasource-provider sqlite

Динамическое использование Prisma Client в Next.js

 - В разработке команда next dev очищает кэш Node.js при выполнении. Это, в свою очередь инициализирует новый экземпляр PrismaClient каждый раз при горячей перезагрузке, который создавая соединение с базой данных.
Это может быстро исчерпать все соединения с базой данных поскольку каждый экземпляр PrismaClient имеет свой собственный пул соединений.
 - Используйте функцию фабрики для динамического создания клиентов Prisma на основе конфигураций, специфичных для клиента:

 https://www.prisma.io/docs/guides/other/troubleshooting-orm/help-articles/nextjs-prisma-client-dev-practices#solution


